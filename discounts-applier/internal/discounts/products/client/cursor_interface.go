// Code generated by ifacemaker; DO NOT EDIT.

package client

import (
	"context"
)

// MongoCursor ...
type MongoCursor interface {
	Unmarshall(results interface{}) error

	// ID returns the ID of this cursor, or 0 if the cursor has been closed or exhausted.
	ID() int64
	// Next gets the next document for this cursor. It returns true if there were no errors and the cursor has not been
	// exhausted.
	//
	// Next blocks until a document is available, an error occurs, or ctx expires. If ctx expires, the
	// error will be set to ctx.Err(). In an error case, Next will return false.
	//
	// If Next returns false, subsequent calls will also return false.
	Next(ctx context.Context) bool
	// TryNext attempts to get the next document for this cursor. It returns true if there were no errors and the next
	// document is available. This is only recommended for use with tailable cursors as a non-blocking alternative to
	// Next. See https://docs.mongodb.com/manual/core/tailable-cursors/ for more information about tailable cursors.
	//
	// TryNext returns false if the cursor is exhausted, an error occurs when getting results from the server, the next
	// document is not yet available, or ctx expires. If ctx expires, the error will be set to ctx.Err().
	//
	// If TryNext returns false and an error occurred or the cursor has been exhausted (i.e. c.Err() != nil || c.ID() == 0),
	// subsequent attempts will also return false. Otherwise, it is safe to call TryNext again until a document is
	// available.
	//
	// This method requires driver version >= 1.2.0.
	TryNext(ctx context.Context) bool
	// Decode will unmarshal the current document into val and return any errors from the unmarshalling process without any
	// modification. If val is nil or is a typed nil, an error will be returned.
	Decode(val interface{}) error
	// Err returns the last error seen by the Cursor, or nil if no error has occurred.
	Err() error
	// Close closes this cursor. Next and TryNext must not be called after Close has been called. Close is idempotent. After
	// the first call, any subsequent calls will not change the state.
	Close(ctx context.Context) error
	// All iterates the cursor and decodes each document into results. The results parameter must be a pointer to a slice.
	// The slice pointed to by results will be completely overwritten. This method will close the cursor after retrieving
	// all documents. If the cursor has been iterated, any previously iterated documents will not be included in results.
	//
	// This method requires driver version >= 1.1.0.
	All(ctx context.Context, results interface{}) error
	// RemainingBatchLength returns the number of documents left in the current batch. If this returns zero, the subsequent
	// call to Next or TryNext will do a network request to fetch the next batch.
	RemainingBatchLength() int
}
