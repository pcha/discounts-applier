// Code generated by ifacemaker; DO NOT EDIT.

package client

import (
	"context"

	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"go.mongodb.org/mongo-driver/mongo/readpref"
)

// MongoClient ...
type MongoClient interface {
	// Connect initializes the Client by starting background monitoring goroutines.
	// If the Client was created using the NewClient function, this method must be called before a Client can be used.
	//
	// Connect starts background goroutines to monitor the state of the deployment and does not do any I/O in the main
	// goroutine. The Client.Ping method can be used to verify that the connection was created successfully.
	Connect(ctx context.Context) error
	// Disconnect closes sockets to the topology referenced by this Client. It will
	// shut down any monitoring goroutines, close the idle connection pool, and will
	// wait until all the in use connections have been returned to the connection
	// pool and closed before returning. If the context expires via cancellation,
	// deadline, or timeout before the in use connections have returned, the in use
	// connections will be closed, resulting in the failure of any in flight read
	// or write operations. If this method returns with no errors, all connections
	// associated with this Client have been closed.
	Disconnect(ctx context.Context) error
	// Ping sends a ping command to verify that the client can connect to the deployment.
	//
	// The rp parameter is used to determine which server is selected for the operation.
	// If it is nil, the client's read preference is used.
	//
	// If the server is down, Ping will try to select a server until the client's server selection timeout expires.
	// This can be configured through the ClientOptions.SetServerSelectionTimeout option when creating a new Client.
	// After the timeout expires, a server selection error is returned.
	//
	// Using Ping reduces application resilience because applications starting up will error if the server is temporarily
	// unavailable or is failing over (e.g. during autoscaling due to a load spike).
	Ping(ctx context.Context, rp *readpref.ReadPref) error
	// StartSession starts a new session configured with the given options.
	//
	// StartSession does not actually communicate with the server and will not error if the client is
	// disconnected.
	//
	// If the DefaultReadConcern, DefaultWriteConcern, or DefaultReadPreference options are not set, the client's read
	// concern, write concern, or read preference will be used, respectively.
	StartSession(opts ...*options.SessionOptions) (mongo.Session, error)
	// Database returns a handle for a database with the given name configured with the given DatabaseOptions.
	Database(name string, opts ...*options.DatabaseOptions) *mongo.Database
	// ListDatabases executes a listDatabases command and returns the result.
	//
	// The filter parameter must be a document containing query operators and can be used to select which
	// databases are included in the result. It cannot be nil. An empty document (e.g. bson.D{}) should be used to include
	// all databases.
	//
	// The opts paramter can be used to specify options for this operation (see the options.ListDatabasesOptions documentation).
	//
	// For more information about the command, see https://docs.mongodb.com/manual/reference/command/listDatabases/.
	ListDatabases(ctx context.Context, filter interface{}, opts ...*options.ListDatabasesOptions) (mongo.ListDatabasesResult, error)
	// ListDatabaseNames executes a listDatabases command and returns a slice containing the names of all of the databases
	// on the server.
	//
	// The filter parameter must be a document containing query operators and can be used to select which databases
	// are included in the result. It cannot be nil. An empty document (e.g. bson.D{}) should be used to include all
	// databases.
	//
	// The opts parameter can be used to specify options for this operation (see the options.ListDatabasesOptions
	// documentation.)
	//
	// For more information about the command, see https://docs.mongodb.com/manual/reference/command/listDatabases/.
	ListDatabaseNames(ctx context.Context, filter interface{}, opts ...*options.ListDatabasesOptions) ([]string, error)
	// UseSession creates a new Session and uses it to create a new SessionContext, which is used to call the fn callback.
	// The SessionContext parameter must be used as the Context parameter for any operations in the fn callback that should
	// be executed under a session. After the callback returns, the created Session is ended, meaning that any in-progress
	// transactions started by fn will be aborted even if fn returns an error.
	//
	// If the ctx parameter already contains a Session, that Session will be replaced with the newly created one.
	//
	// Any error returned by the fn callback will be returned without any modifications.
	UseSession(ctx context.Context, fn func(mongo.SessionContext) error) error
	// UseSessionWithOptions operates like UseSession but uses the given SessionOptions to create the Session.
	UseSessionWithOptions(ctx context.Context, opts *options.SessionOptions, fn func(mongo.SessionContext) error) error
	// Watch returns a change stream for all changes on the deployment. See
	// https://docs.mongodb.com/manual/changeStreams/ for more information about change streams.
	//
	// The client must be configured with read concern majority or no read concern for a change stream to be created
	// successfully.
	//
	// The pipeline parameter must be an array of documents, each representing a pipeline stage. The pipeline cannot be
	// nil or empty. The stage documents must all be non-nil. See https://docs.mongodb.com/manual/changeStreams/ for a list
	// of pipeline stages that can be used with change streams. For a pipeline of bson.D documents, the mongo.Pipeline{}
	// type can be used.
	//
	// The opts parameter can be used to specify options for change stream creation (see the options.ChangeStreamOptions
	// documentation).
	Watch(ctx context.Context, pipeline interface{}, opts ...*options.ChangeStreamOptions) (*mongo.ChangeStream, error)
	// NumberSessionsInProgress returns the number of sessions that have been started for this client but have not been
	// closed (i.e. EndSession has not been called).
	NumberSessionsInProgress() int
}
